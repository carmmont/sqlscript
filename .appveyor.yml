# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.0.{build}

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: 
  - Visual Studio 2015
  - Visual Studio 2017

# environment variables
environment:
  coverall:
    secure: 2dkcctTsGqQPGWhvydzFChjctp33OSEkfclaRYUDWkmDIV0uxgSZ4j3rvHMZakm3
  matrix:
  - db: sql2008-14
    SQLINSTANCE: (local)\SQL2008R2SP2
    SQLINSTANCE2: (local)\SQL2014
  - db: sql2012-16
    SQLINSTANCE: (local)\SQL2012SP1
    SQLINSTANCE2: (local)\SQL2016
  - db: sql2014-17
    SQLINSTANCE: (local)\SQL2014
    SQLINSTANCE2: (local)\SQL2017
  
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$
  
  
  # this is how to set encrypted variable. Go to "Encrypt data" page in account menu to encrypt data.
  #my_secure_var1:
  #  secure: FW3tJ3fMncxvs58/ifSP7w==

# environment:
#  global:
#    connection_string: server=12;password=13;
#    service_url: https://127.0.0.1:8090
#


# this is how to allow failing jobs in the matrix
#matrix:


# build cache to preserve files/folders between builds
#cache:
  #- packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified

init:
  - pwsh: | 
      Get-ChildItem -Path 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\' |
      Where-Object {
          $_.Name -imatch 'MSSQL[_\d]+\.SQL.*'
      } |
      ForEach-Object {

          Write-Host "Setting $((Get-ItemProperty $_.PSPath).'(default)') to dynamic ports"
          Set-ItemProperty (Join-Path $_.PSPath 'mssqlserver\supersocketnetlib\tcp\ipall') -Name TcpDynamicPorts -Value '0'
          Set-ItemProperty (Join-Path $_.PSPath 'mssqlserver\supersocketnetlib\tcp\ipall') -Name TcpPort -Value ([string]::Empty)
      }
# enable service required for build/tests
services:
  - mssql2008r2sp2
  - mssql2012sp1
  - mssql2014
  - mssql2016
  - mssql2017

#  - iis                 # start IIS

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - pwsh: ./deps.ps1
  #- pwsh: md './bin/nuget'

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
#platform: Win32 

# to add several platforms to build matrix:
platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
#configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

build: off
#  parallel: true                  # enable MSBuild parallel builds
#  project: sqlscripter.sln      # path to Visual Studio solution or project

  # MSBuild verbosity level
#  verbosity: normal


# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages
# , Azure Cloud Services)
before_package:
    

# to run your custom scripts instead of automatic MSBuild
build_script:
    - pwsh: |
        if((-Not [string]::IsNullOrEmpty($env:APPVEYOR_REPO_TAG)) -and 'false' -ne "$env:APPVEYOR_REPO_TAG")
        {$env:VERSION=$env:APPVEYOR_REPO_TAG_NAME}
        else
        {$env:VERSION=$env:APPVEYOR_BUILD_VERSION};
        "-[$env:VERSION]-" | oh;
        $i = "[$env:VERSION] [$env:APPVEYOR_REPO_TAG] [$env:APPVEYOR_REPO_TAG_NAME] [$env:APPVEYOR_BUILD_VERSION] [$env:APPVEYOR_BUILD_NUMBER]"; $i | out-host;
        Set-AppveyorBuildVariable -Name "VERSION" -Value $env:VERSION;
    - pwsh: dotnet restore ./sqlscripter.sln
    - pwsh: dotnet publish -c Release -o out ./sqlscripter.sln /p:BuildNumber=$env:VERSION
    - pwsh: dotnet publish -c Release -o Win64 --runtime "win-x64" ./sqlscripter.sln /p:BuildNumber=$env:VERSION /p:PackAsTool=false
    - pwsh: |
        dotnet pack -c Release -o Pack ./sqlscripter.sln /p:BuildNumber=$env:VERSION
        $pkg = (gi ./src/sqlscripter/Pack/*.nupkg).FullName
        Push-AppveyorArtifact $pkg
    - pwsh: if("Visual Studio 2017" -eq $env:APPVEYOR_BUILD_WORKER_IMAGE){ Set-AppveyorBuildVariable -Name "SQLINSTANCE" -Value $env:SQLINSTANCE2; }
    - pwsh: $sql = "SQLSERVER $env:SQLINSTANCE"; $sql | oh;
    #- pwsh: get-service | ? {$_ -match "sql"}



# scripts to run after build
after_build:
        - ps: 7z a sqlscripter.zip './src/sqlscripter/out/*';
        - ps: 7z a sqlscripterx64.zip './src/sqlscripter/Win64/*'; 

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
  

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
before_test:
    - git clone https://github.com/aseduto/minicover.git
    - cd minicover
    #- git checkout coverall
    - git checkout fix/lambda
    - dotnet restore
    - dotnet publish ./src/MiniCover/MiniCover.csproj -o out -c Release
    - cd ..
    - sqlcmd -b -S %SQLINSTANCE% -U sa -P "Password12!" -Q "CREATE DATABASE TESTDB"
    - sqlcmd -b -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -i ./test/create.sql
    - sqlcmd -b -S %SQLINSTANCE% -U sa -P "Password12!" -Q "CREATE DATABASE TESTDB2" 

# scripts to run after tests
after_test:

# to run your custom scripts instead of automatic tests
test_script:
    - dotnet ./minicover/src/MiniCover/out/dotnet-minicover.dll instrument --workdir ./ --assemblies src/**/out/**/*.dll --sources src/**/*.cs
    - dotnet ./src/sqlscripter/out/sqlscripter.dll --help
    - dotnet ./src/sqlscripter/out/sqlscripter.dll coverage -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -f -s "exec test_coverage 0"
    - dotnet ./src/sqlscripter/out/sqlscripter.dll coverage -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -f -s "exec test_coverage 1" --detail
    - dotnet ./src/sqlscripter/out/sqlscripter.dll coverage -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -n -s "exec test_coverage 0" --save info.xml
    - pwsh: gc info.xml
    - dotnet ./src/sqlscripter/out/sqlscripter.dll coverage -S %SQLINSTANCE% -U sa -P "Password12!" -d XXXXXX -n -s "exec test_coverage 0" & exit 0
    - dotnet ./src/sqlscripter/out/sqlscripter.dll info -S %SQLINSTANCE% -U sa -P "Password12!" -d MASTER 
    - dotnet ./src/sqlscripter/out/sqlscripter.dll info -S %SQLINSTANCE% & exit 0
    - dotnet ./src/sqlscripter/out/sqlscripter.dll info & exit 0
    - dotnet ./src/sqlscripter/out/sqlscripter.dll dbindex -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -i index.txt --no-progress 
    - dotnet ./src/sqlscripter/out/sqlscripter.dll dbindex -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -i index2.txt --no-progress --query-mode
    - pwsh: (gc ./index.txt | out-string) -eq (gc ./index2.txt | out-string) 
    - dotnet ./src/sqlscripter/out/sqlscripter.dll urn -u "Server[@Name='4f4c6527222b']/Database[@Name='MONITORING']/Table[@Name='Procedures' and @Schema='Gathering']"
    - dotnet ./src/sqlscripter/out/sqlscripter.dll urn -u "INVALID" & exit 0
    - dotnet ./src/sqlscripter/out/sqlscripter.dll script -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -i index.txt --no-progress
    - dotnet ./src/sqlscripter/out/sqlscripter.dll script -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB -i index.txt --no-progress --file-version
    - dotnet ./src/sqlscripter/out/sqlscripter.dll build -i index.txt -o create.sql --no-progress
    - dotnet ./src/sqlscripter/out/sqlscripter.dll build -i index.txt -o create.sql --no-progress --database-version "0.9.0.0"
    - pwsh: (gc .\create.sql | out-string) -eq (gc ./test/create.sql | out-string)
    - sqlcmd -b -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB2 -i ./create.sql
    #idempotent
    - sqlcmd -b -S %SQLINSTANCE% -U sa -P "Password12!" -d TESTDB2 -i ./create.sql
    #test version increase
    - ls StoredProcedures
    #- cd tools
    #- dotnet minicover report --workdir ../ --threshold 90
    #- pwsh: ls env: | ? {-Not ($_.name -match 'coverall')}
    - echo %APPVEYOR_REPO_COMMIT%
    - echo %APPVEYOR_REPO_BRANCH%
    - dotnet ./minicover/src/minicover/out/dotnet-minicover.dll report --workdir ./ --threshold 50
    - dotnet ./minicover/src/MiniCover/out/dotnet-minicover.dll coverallsreport --commit %APPVEYOR_REPO_COMMIT% --service-name appveyor --output coverall.json --service-job-id %APPVEYOR_BUILD_NUMBER% --repo-token %coverall% --branch %APPVEYOR_REPO_BRANCH% --remote origin --remote-url https://github.com/aseduto/testman.git --commit-message "%APPVEYOR_REPO_COMMIT_MESSAGE%"

# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
    - path: sqlscripter.zip
      name: sqlscripter
    - path: sqlscripterx64.zip
      name: sqlscripterx64
#- path: '.\test\bin\Win32\Release\mg.pdb'
#  name: mg.pdb
#- path: win-release.zip
#  name: win-release

 


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:

  

    # Deploy to GitHub Releases
  - provider: GitHub
    release: $(appveyor_repo_tag_name)
    artifact: sqlscripter.zip,sqlscripterx64.zip
    draft: true
    prerelease: true
    auth_token:
        secure: OGsnt+Yh/2jNrAJ8kgslOcYuRbtyrgKj/CHHyEIEC0YsJQE6FxpqtLPrvihxQYx/
    on:
     appveyor_repo_tag: true       # deploy on tag push only
  - provider: NuGet
    api_key:
      secure: YSawB0BDx6YjIM3itCGTjA2I81T3UMuyhE5z0NZI7XvvZXZtOtd0YXen7VkcVBKT
    on:
     appveyor_repo_tag: true       # deploy on tag push only


   

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  #- do something

# on build failure
on_failure:
 # - do something

# after build failure or success
on_finish:
  #- do something


#---------------------------------#
#         notifications           #
#---------------------------------#

notifications:

  # Email
  - provider: Email
    to:
      - aseduto@hotmail.com
    subject: 'Build {{status}}'                  # optional
    message: "{{message}}, {{commitId}}, ..."    # optional
    on_build_status_changed: true

 


